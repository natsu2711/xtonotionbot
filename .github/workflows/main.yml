name: X to Notion Bot (with Supabase State)

on:
  schedule:
    - cron: '0 1,7,15,19,23 * * *'
  workflow_dispatch:

jobs:
  scrape:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: pip install -r requirements.txt

      - name: Install Playwright browsers
        run: python -m playwright install --with-deps chromium

      # --- 更新：使用您验证过的requests逻辑下载登录态 ---
      - name: Download previous storage state from Supabase
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          python -c "
          import os, requests, json
          
          url = os.environ.get('SUPABASE_URL')
          key = os.environ.get('SUPABASE_SERVICE_KEY')
          bucket = 'aixtonotion' # 使用您已验证的bucket名
          filename = 'storage_state.json'
          
          api_url = f'{url}/storage/v1/object/{bucket}/{filename}'
          headers = {'Authorization': f'Bearer {key}', 'apikey': key}
          
          try:
              print(f'Downloading from {api_url}...')
              response = requests.get(api_url, headers=headers)
              response.raise_for_status() # 如果HTTP状态码不是2xx，则抛出异常
              
              # 验证下载内容是否为有效JSON
              json.loads(response.content)

              with open(filename, 'wb') as f:
                  f.write(response.content)
              print(f'✅ Successfully downloaded and validated {filename}.')
          except Exception as e:
              print(f'⚠️ Could not download or validate {filename} (maybe first run?): {e}')
          "

      # --- 运行主脚本 ---
      - name: Run the scraper script
        env:
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
        run: |
          # 创建.env文件
          echo "NOTION_API_KEY=${{ secrets.NOTION_API_KEY }}" > .env
          echo "NOTION_DATABASE_ID=${{ secrets.NOTION_DATABASE_ID }}" >> .env
          
          python xtonotionai.py # 使用您确认的文件名

      # --- 更新：使用您验证过的requests逻辑上传新的登录态 ---
      - name: Upload new storage state to Supabase
        if: always() # 确保即使脚本失败也尝试上传
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_KEY: ${{ secrets.SUPABASE_SERVICE_KEY }}
        run: |
          python -c "
          import os, requests, json

          url = os.environ.get('SUPABASE_URL')
          key = os.environ.get('SUPABASE_SERVICE_KEY')
          bucket = 'aixtonotion'
          filename = 'storage_state.json'
          
          api_url = f'{url}/storage/v1/object/{bucket}/{filename}'
          headers = {'Authorization': f'Bearer {key}', 'apikey': key}

          if not os.path.exists(filename):
              print(f'⚠️ {filename} not found locally, nothing to upload.')
          else:
              try:
                  with open(filename, 'rb') as f:
                      content = f.read()

                  # 再次验证是有效的JSON
                  json.loads(content.decode('utf-8'))
                  
                  # 使用 upsert 功能 (x-upsert头)
                  headers['Content-Type'] = 'application/json'
                  headers['x-upsert'] = 'true'

                  response = requests.post(api_url, headers=headers, data=content)
                  response.raise_for_status()
                  
                  print(f'✅ Successfully uploaded new {filename} to Supabase.')
              except Exception as e:
                  print(f'❌ Failed to upload {filename}: {e}')
          "
